library(leaflet)
library(tidyverse)
m <- leaflet()
m <- addTiles(m)
m <- addMarkers(m, lng=-81.655210, lat=30.324303, popup="<b>Hello</b><br><a href='http://ire.org/conferences/nicar2017/'>-NICAR 2017</a>")
# Initialize and assign m as the leaflet object
m <- leaflet()
# Now add tiles to it
m <- addTiles(m)
# Now, add a marker with a popup
m <- addMarkers(m, lng=-111.9761115, lat=33.6809821, popup="<b>Hello</b><br><a href='http://ire.org/conferences/ire2017/'>-IRE 2017</a>")
# Print out the map
m
m <- addMarkers(m, lng= -111.965886, lat=33.683815, popup="<b>Hello</b><br><a href='http://ire.org/conferences/ire2017/'>-IRE 2017</a>")
m
m <- leaflet() %>%
addTiles() %>%
setView(-81.655210, 30.324303, zoom = 16) %>%
addMarkers(lng=-81.655210, lat=30.324303, popup="<b>Hello</b><br><a href='http://ire.org/conferences/nicar2017/'>-NICAR 2017</a>")
m
library(DT)
datatable(head(dunkin))
dunkin <- read.csv("data/dunkin.csv", stringsAsFactors=F)
datatable(head(dunkin))
m <- leaflet(dunkin) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-81.655210, 30.324303, zoom = 8) %>%
addCircles(~lon, ~lat, popup=dunkin$type, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8)
m
starbucks <- read.csv("data/starbucks.csv", stringsAsFactors=F)
datatable(head(starbucks))
sb_loc <- select(starbucks, type, lat, lon)
dd_loc <- select(dunkin, type, lat, lon)
ddsb <- rbind(sb_loc, dd_loc)
cof <- colorFactor(c("#ffa500", "#13ED3F"), domain=c("Dunkin Donuts", "Starbucks"))
m <- leaflet(ddsb) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-81.655210, 30.324303, zoom = 8) %>%
addCircleMarkers(~lon, ~lat, popup=ddsb$type, weight = 3, radius=4,
color=~cof(type), stroke = F, fillOpacity = 0.5)
m
m <- leaflet(ddsb) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-81.655210, 30.324303, zoom = 8) %>%
addCircleMarkers(~lon, ~lat, popup=ddsb$type, weight = 3, radius=4,
color=~cof(type), stroke = F, fillOpacity = 0.5)  %>%
addLegend("bottomright", colors= c("#ffa500", "#13ED3F"), labels=c("Dunkin'", "Starbucks"), title="Coffee places")
m
View(starbucks)
sb_example <- select(starbucks, Address, City, Province, Postal.Code)
sb_example $location <- paste0(sb_example$Address, ", ", sb_example$City, ", ", sb_example$Province, " ", sb_example$Postal.Code)
View(sb_example)
sb_example <- select(starbucks, Address, City, Province, Postal.Code)
sb_example <- sb_example[1:10,]
# Need a single column for addresses,
sb_example $location <- paste0(sb_example$Address, ", ", sb_example$City, ", ", sb_example$Province, " ", sb_example$Postal.Code)
View(sb_example)
geo <- geocode(location = sb_example$location, output="latlon", source="google")
library(ggmap)
geo <- geocode(location = sb_example$location, output="latlon", source="google")
sb_example$lon <- geo$lon
sb_example$lat <- geo$lat
View(sb_example)
sb_example <- select(starbucks, Address, City, Province, Postal.Code)
sb_example <- sb_example[1:10,]
# Need a single column for addresses,
sb_example $location <- paste0(sb_example$Address, ", ", sb_example$City, ", ", sb_example$Province, " ", sb_example$Postal.Code)
datatable(sb_example)
geo <- geocode(location = sb_example$location, output="latlon", source="google")
sb_example$lon <- geo$lon
sb_example$lat <- geo$lat
datatable(sb_example)
sb_distances <- read.csv("data/sb_distances.csv")
sb_10 <- sb_distances %>%
arrange(feet) %>%
filter(feet > 60) %>%
head(40)
sb_solo <- select(sb_10, lat, lon, feet)
sb_solo2 <- select(sb_10, sb_lat, sb_lon, feet)
colnames(sb_solo2) <- c("lat", "lon", "feet")
sb_again <- rbind(sb_solo, sb_solo2)
# Mapping it
m <- leaflet(sb_again) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addCircleMarkers(~lon, ~lat, popup=sb_again$feet, weight = 3, radius=4,
color="#13ED3F", stroke = F, fillOpacity = 0.5)  %>%
addLegend("bottomright", colors= "#13ED3F", labels="Starbucks", title="End of the Universe")
m
library(tigris)
states <- states(cb=T)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
sb_state <- starbucks %>%
group_by(Province) %>%
summarize(total=n())
sb_state$type <- "Starbucks"
colnames(sb_state) <- c("state", "total", "type")
states_merged_sb <- geo_join(states, sb_state, "STUSPS", "state")
pal <- colorNumeric("Greens", domain=states_merged_sb$total)
states_merged_sb <- subset(states_merged_sb, !is.na(total))
popup_sb <- paste0("Total: ", as.character(states_merged_sb$total))
# Mapping it with the new tiles CartoDB.Positron
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_sb ,
fillColor = ~pal(states_merged_sb$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(pal = pal,
values = states_merged_sb$total,
position = "bottomright",
title = "Starbucks")
devtools::install_github("hrecht/censusapi")
library(censusapi)
source("key.R")
state_pop <-  getCensus(name="acs5",
vintage=2015,
key=census_key,
vars=c("NAME", "B01003_001E"),
region="state:*")
datatable(head(state_pop))
colnames(state_pop) <- c("NAME", "state_id", "population")
state_pop$state_id <- as.numeric(state_pop$state_id)
state_off <- data.frame(state.abb, state.name)
colnames(state_off) <- c("state", "NAME")
state_pop <- left_join(state_pop, state_off)
state_pop$state <- ifelse(state_pop$NAME=="District of Columbia", "DC", as.character(state_pop$state))
state_pop$state <- ifelse(state_pop$NAME=="Puerto Rico", "PR", as.character(state_pop$state))
sb_state_pop <- left_join(sb_state, state_pop)
sb_state_pop$per_capita <- round(sb_state_pop$total/sb_state_pop$population*100000,2)
# Eliminating rows with NA
sb_state_pop <- subset(sb_state_pop, !is.na(per_capita))
datatable(head(sb_state_pop))
states_merged_sb_pc <- geo_join(states, sb_state_pop, "STUSPS", "state")
pal_sb <- colorNumeric("Greens", domain=states_merged_sb_pc$per_capita)
states_merged_sb_pc <- subset(states_merged_sb_pc, !is.na(per_capita))
popup_sb <- paste0("Per capita: ", as.character(states_merged_sb_pc$per_capita))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_sb_pc ,
fillColor = ~pal_sb(states_merged_sb_pc$per_capita),
fillOpacity = 0.9,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(pal = pal_sb,
values = states_merged_sb_pc$per_capita,
position = "bottomright",
title = "Starbucks<br />per 100,000<br/>residents")
library(sp)
install.packages("leaflet")
install.packages("DT")
library(ggmap)
install.packages("ggmap")
install.packages("sp")
library(tidyverse)
# Initialize and assign m as the leaflet object
m <- leaflet()
# Now add tiles to it
m <- addTiles(m)
# Now, add a marker with a popup
m <- addMarkers(m, lng= -111.965886, lat=33.683815, popup="<b>Hello</b><br><a href='http://ire.org/conferences/ire2017/'>-IRE 2017</a>")
# Print out the map
m
library(leaflet)
# Initialize and assign m as the leaflet object
m <- leaflet()
# Now add tiles to it
m <- addTiles(m)
# Now, add a marker with a popup
m <- addMarkers(m, lng= -111.965886, lat=33.683815, popup="<b>Hello</b><br><a href='http://ire.org/conferences/ire2017/'>-IRE 2017</a>")
# Print out the map
m
m <- leaflet() %>%
addTiles() %>%
setView(-81.655210, 30.324303, zoom = 16) %>%
addMarkers(lng=-81.655210, lat=30.324303, popup="<b>Hello</b><br><a href='http://ire.org/conferences/nicar2017/'>-NICAR 2017</a>")
m
m <- leaflet() %>%
addTiles() %>%
setView(-111.965886, 33.683815, zoom = 16) %>%
addMarkers(lng=-111.965886, lat=33.683815, popup="<b>Hello</b><br><a href='http://ire.org/conferences/nicar2017/'>-IRE 2017</a>")
m
datatable(head(dunkin))
library(DT)
dunkin <- read.csv("data/dunkin.csv", stringsAsFactors=F)
datatable(head(dunkin))
m <- leaflet(dunkin) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-81.655210, 30.324303, zoom = 8) %>%
addCircles(~lon, ~lat, popup=dunkin$type, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8)
m
m <- leaflet(dunkin) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-111.965886, 33.683815, zoom = 8) %>%
addCircles(~lon, ~lat, popup=dunkin$type, weight = 3, radius=40,
color="#ffa500", stroke = TRUE, fillOpacity = 0.8)
m
starbucks <- read.csv("data/starbucks.csv", stringsAsFactors=F)
datatable(head(starbucks))
library(ggmap)
sb_example <- select(starbucks, Address, City, Province, Postal.Code)
sb_example <- sb_example[1:10,]
sb_example$location <- paste0(sb_example$Address, ", ", sb_example$City, ", ", sb_example$Province, " ", sb_example$Postal.Code)
datatable(sb_example)
geo <- geocode(location = sb_example$location, output="latlon", source="google")
geo
sb_example$lon <- geo$lon
sb_example$lat <- geo$lat
datatable(sb_example)
sb_loc <- select(starbucks, type, lat, lon)
dd_loc <- select(dunkin, type, lat, lon)
ddsb <- rbind(sb_loc, dd_loc)
cof <- colorFactor(c("#ffa500", "#13ED3F"), domain=c("Dunkin Donuts", "Starbucks"))
# mapping based on type
m <- leaflet(ddsb) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-81.655210, 30.324303, zoom = 8) %>%
addCircleMarkers(~lon, ~lat, popup=ddsb$type, weight = 3, radius=4,
color=~cof(type), stroke = F, fillOpacity = 0.5)
m
# mapping based on type
m <- leaflet(ddsb) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-111.965886, 33.683815, zoom = 8) %>%
addCircleMarkers(~lon, ~lat, popup=ddsb$type, weight = 3, radius=4,
color=~cof(type), stroke = F, fillOpacity = 0.5)
m
m <- leaflet(ddsb) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-111.965886, 33.683815, zoom = 8) %>%
addCircleMarkers(~lon, ~lat, popup=ddsb$type, weight = 3, radius=4,
color=~cof(type), stroke = F, fillOpacity = 0.5)  %>%
addLegend("bottomright", colors= c("#ffa500", "#13ED3F"), labels=c("Dunkin'", "Starbucks"), title="Coffee places")
m
library(sp)
sb_loc$sb_lat <- 0
sb_loc$sb_lon <- 0
sb_loc$feet <- 0
sb_loc$string_check <- paste(sb_loc$lat, sb_loc$lon)
for (i in 1:nrow(sb_loc)) {
print(paste0(i, " of ", nrow(sb_loc)))
# Looping through the SB dataframe
# slicing out each row
sb_loc_row <- subset(sb_loc[i,])
# Filtering out the sliced out row so it doesn't measure against itself
sb_loc_compare <- subset(sb_loc, string_check!=sb_loc_row$string_check[1])
# Looping through the new SB dataframe
for (x in 1:nrow(sb_loc_compare)) {
# Using the spDistsN1 function which is a little weird because it
#  only works if the lat lon pairs being measured are in a matrix
to_measure_sb <- matrix(c(sb_loc_row$lon[1], sb_loc_compare$lon[x], sb_loc_row$lat[1], sb_loc_compare$lat[x]), ncol=2)
# Comparing the entire matrix to a single row in the matrix
km <- spDistsN1(to_measure_sb, to_measure_sb[1,], longlat=TRUE)
# We only care about the second result sine the first result is always zero
km <- km[2]
# Converting kilometers to feet
feet <- round(km*1000/.3048,2)
# These if statements replace the current SB lat and lon and feet variables
#  with the first results but replaces that if
#  the feet value is smaller than what's currently in it
if (x==1) {
sb_loc_row$sb_lat <- sb_loc_compare$lat[x]
sb_loc_row$sb_lon <- sb_loc_compare$lon[x]
sb_loc_row$feet <- feet
sb_loc_row$sb_name <- sb_loc_compare$string_check[x]
} else {
if (feet < sb_loc_row$feet) {
sb_loc_row$sb_lat <- sb_loc_compare$lat[x]
sb_loc_row$sb_lon <- sb_loc_compare$lon[x]
sb_loc_row$feet <- feet
sb_loc_row$sb_name <- sb_loc_compare$string_check[x]
}
}
}
# This is rebuilding the dataframe row by row with the new SB dataframe values
if (i==1) {
sb_distances <- sb_loc_row
} else {
sb_distances <- rbind(sb_distances, sb_loc_row)
}
}
sb_distances <- read.csv("data/sb_distances.csv")
# Arranging and filtering just the 10 locations with the shortest distances
sb_10 <- sb_distances %>%
arrange(feet) %>%
filter(feet > 60) %>%
head(40)
sb_solo <- select(sb_10, lat, lon, feet)
sb_solo2 <- select(sb_10, sb_lat, sb_lon, feet)
colnames(sb_solo2) <- c("lat", "lon", "feet")
sb_again <- rbind(sb_solo, sb_solo2)
m <- leaflet(sb_again) %>% addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png',
attribution='Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>') %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addCircleMarkers(~lon, ~lat, popup=sb_again$feet, weight = 3, radius=4,
color="#13ED3F", stroke = F, fillOpacity = 0.5)  %>%
addLegend("bottomright", colors= "#13ED3F", labels="Starbucks", title="End of the Universe")
m
install.packages("tigris")
library(tigris)
states <- states(cb=T)
library(tigris)
install.packages("sf)
install.packages("sf")
library(tigris)
install.packages("rgdal")
install.packages("rgdal")
install.packages("sf")
library(leaflet)
library(tidyverse)
library(DT)
library(ggmap)
library(sp)
library(sf)
install.packages("sf")
#install.packages("leaflet")
library(leaflet)
#install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
#install.packages("leaflet")
library(leaflet)
#install.packages("tidyverse")
library(tidyverse)
library(ggmap)
library(sp)
install.packages("rgdal")
install.packages("sf")
#install.packages("leaflet")
library(leaflet)
#install.packages("tidyverse")
library(tidyverse)
install.packages("sf")
library(tigris)
library(sf)
library(rgdal)
install.packages("sf")
library(sf)
library(tigris)
states <- states(cb=T)
states %>% leaflet() %>% addTiles() %>% addPolygons(popup=~NAME)
sb_state <- starbucks %>%
group_by(Province) %>%
summarize(total=n())
sb_state$type <- "Starbucks"
colnames(sb_state) <- c("state", "total", "type")
states_merged_sb <- geo_join(states, sb_state, "STUSPS", "state")
pal <- colorNumeric("Greens", domain=states_merged_sb$total)
states_merged_sb <- subset(states_merged_sb, !is.na(total))
popup_sb <- paste0("Total: ", as.character(states_merged_sb$total))
# Mapping it with the new tiles CartoDB.Positron
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_sb ,
fillColor = ~pal(states_merged_sb$total),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(pal = pal,
values = states_merged_sb$total,
position = "bottomright",
title = "Starbucks")
devtools::install_github("hrecht/censusapi")
install.packages("devtools")
devtools::install_github("hrecht/censusapi")
library(censusapi)
source("key.R")
state_pop <-  getCensus(name="acs5",
vintage=2015,
key=census_key,
vars=c("NAME", "B01003_001E"),
region="state:*")
datatable(head(state_pop))
library(DT)
datatable(head(state_pop))
# Cleaning up the column names
colnames(state_pop) <- c("NAME", "state_id", "population")
state_pop$state_id <- as.numeric(state_pop$state_id)
# Hm, data comes in numbers of fully spelled out, not abbreviations
# Did you know R has its own built in list of State names and State abbreviations?
# Just pull it in this way to create a dataframe for reference
state_off <- data.frame(state.abb, state.name)
colnames(state_off) <- c("state", "NAME")
# Joining state population dataframe to relationship file
state_pop <- left_join(state_pop, state_off)
# The relationship dataframe didnt have DC or Puerto Rico, so I'm manually putting those in
state_pop$state <- ifelse(state_pop$NAME=="District of Columbia", "DC", as.character(state_pop$state))
state_pop$state <- ifelse(state_pop$NAME=="Puerto Rico", "PR", as.character(state_pop$state))
sb_state_pop <- left_join(sb_state, state_pop)
sb_state_pop$per_capita <- round(sb_state_pop$total/sb_state_pop$population*100000,2)
# Eliminating rows with NA
sb_state_pop <- subset(sb_state_pop, !is.na(per_capita))
datatable(head(sb_state_pop))
states_merged_sb_pc <- geo_join(states, sb_state_pop, "STUSPS", "state")
pal_sb <- colorNumeric("Greens", domain=states_merged_sb_pc$per_capita)
states_merged_sb_pc <- subset(states_merged_sb_pc, !is.na(per_capita))
popup_sb <- paste0("Per capita: ", as.character(states_merged_sb_pc$per_capita))
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 4) %>%
addPolygons(data = states_merged_sb_pc ,
fillColor = ~pal_sb(states_merged_sb_pc$per_capita),
fillOpacity = 0.9,
weight = 0.2,
smoothFactor = 0.2,
popup = ~popup_sb) %>%
addLegend(pal = pal_sb,
values = states_merged_sb_pc$per_capita,
position = "bottomright",
title = "Starbucks<br />per 100,000<br/>residents")
